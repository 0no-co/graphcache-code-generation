import { InlineFragmentNode, FragmentDefinitionNode } from 'graphql';
import { SchemaIntrospector } from './schema';
import { KeyingConfig, UpdateResolver, ResolverConfig, OptimisticMutationConfig } from '../types';
export declare const isFieldNullable: (schema: SchemaIntrospector, typename: string, fieldName: string) => boolean;
export declare const isListNullable: (schema: SchemaIntrospector, typename: string, fieldName: string) => boolean;
export declare const isFieldAvailableOnType: (schema: SchemaIntrospector, typename: string, fieldName: string) => boolean;
export declare const isInterfaceOfType: (schema: SchemaIntrospector, node: InlineFragmentNode | FragmentDefinitionNode, typename: string | void) => boolean;
export declare function expectValidKeyingConfig(schema: SchemaIntrospector, keys: KeyingConfig): void;
export declare function expectValidUpdatesConfig(schema: SchemaIntrospector, updates: Record<string, Record<string, UpdateResolver>>): void;
export declare function expectValidResolversConfig(schema: SchemaIntrospector, resolvers: ResolverConfig): void;
export declare function expectValidOptimisticMutationsConfig(schema: SchemaIntrospector, optimisticMutations: OptimisticMutationConfig): void;
